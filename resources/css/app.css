@tailwind base;
@tailwind components;
@tailwind utilities;
.fade-enter-active,
.fade-leave-active {
    @apply transition-opacity duration-300;
}

.fade-enter,
.fade-leave-to {
    @apply opacity-0;
}
/* <template>
    <div class="inline-flex space-x-2 border rounded p-2">
        <form @submit.prevent="toggleFavorite">
            <button type="submit" class="text-white text-sm">
                <svg :class="['w-4', 'h-4', 'transition-colors', 'duration-500 fill-blue-500', { 'fill-red-500': isFavorited && this.user, '':''}]" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                <path d="M10 18l-1.45-1.32C4.53 12.18 1 9.19 1 5.5 1 3.02 3.02 1 5.5 1c1.54 0 3.04.78 3.95 2.05C10.46 1.78 11.96 1 13.5 1 16.43 1 19 3.57 19 6.5c0 3.69-3.53 6.68-8.55 11.18L10 18z"></path>
                              </svg>
            </button>
        </form>
        <span class="text-sm">{{ item.favorites_count > 0 ? item.favorites_count : '0' }}</span>
    </div>
</template>

<script>
import axios from 'axios';

export default {
  props: {
    item: {
      type: Object,
      required: true,
    },
    type: {
      type: String,
      required: true,
    },
    user: {
      type: Object,
      required: true,
    },
  },

  data() {
    return {
      isFavorited: this.item.isFavorited,
      localStorageKey: `reply-${this.item.id}-favorite`,
    };
  },

  mounted() {
    const storedFavorited = localStorage.getItem(this.localStorageKey);
    if (storedFavorited) {
      this.isFavorited = JSON.parse(storedFavorited);
    }
  },

  methods: {
    async toggleFavorite() {
      if (!this.user) {
        // return to the login page using vue 3
        window.location.href = '/login';


        return;
      }

      try {
        const method = this.isFavorited ? 'delete' : 'post';

        // Optimistically update UI
        this.isFavorited = !this.isFavorited;
        this.item.favorites_count += this.isFavorited ? 1 : -1;

        const response = await axios[method](`/${this.type}/${this.item.id}/favorites`);

        // Update state based on API response
        this.isFavorited = response.data.isFavorited;
        this.item.favorites_count = response.data.favorites_count;

        // Store favorited state in localStorage (optional)
        localStorage.setItem(this.localStorageKey, JSON.stringify(this.isFavorited));

        // Emit event for other components to react
        this.$emit('favorite-toggled', response.data);

        console.log('Favorite toggled:', response.data);
      } catch (error) {
        console.error('Error toggling favorite:', error);

        // Rollback optimistic update
        this.isFavorited = !this.isFavorited;
        this.item.favorites_count += this.isFavorited ? 1 : -1;

        // Handle and display error to the user
        this.$emit('favorite-toggle-error', error);
      }
    },
  },
};

</script> */

/* <template>
    <div class="inline-flex space-x-2 border rounded p-2">
        <form @submit.prevent="toggleFavorite">
            <button type="submit" class="text-white text-sm">
                <svg :class="['w-4', 'h-4', 'transition-colors', 'duration-500 fill-blue-500', { 'fill-red-500': isFavorited && this.user, '': '' }]" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M10 18l-1.45-1.32C4.53 12.18 1 9.19 1 5.5 1 3.02 3.02 1 5.5 1c1.54 0 3.04.78 3.95 2.05C10.46 1.78 11.96 1 13.5 1 16.43 1 19 3.57 19 6.5c0 3.69-3.53 6.68-8.55 11.18L10 18z"></path>
                                        </svg>
            </button>
        </form>
        <span class="text-sm">{{ item.favorites_count }}</span>
    </div>
</template>

<script>
import axios from 'axios';

export default {
    props: {
        item: {
            type: Object,
            required: true,
        },
        type: {
            type: String,
            required: true,
        },
        user: {
            type: Object,
            required: true,
        },
    },

    data() {
        return {
            isFavorited: this.item.isFavorited,
            localStorageKey: `reply-${this.item.id}-favorite`,
        };
    },

    mounted() {
        const storedFavorited = localStorage.getItem(this.localStorageKey);

        if (storedFavorited && storedFavorited.trim() !== '') {
            try {
                this.isFavorited = JSON.parse(storedFavorited);
            } catch (e) {
                console.error('Error parsing storedFavorited:', e);
            }
        } else {
            this.isFavorited = false;
        }
    },

    methods: {
        async toggleFavorite() {
            if (!this.user) {
                window.location.href = '/login';
                return;
            }
            try {
                const method = this.isFavorited ? 'delete' : 'post';
                const response = await axios[method](`/${this.type}/${this.item.id}/favorites`);
                // Optimistically update UI
                this.isFavorited = response.data.isFavorited;
                this.item.favorites_count = response.data.favorites_count;
                // Store favorited state in localStorage (optional)
                localStorage.setItem(this.localStorageKey, JSON.stringify(this.isFavorited));

                // Emit event for other components to react
                this.$emit('favorite-toggled', response.data);
            } catch (error) {
                this.$emit('favorite-toggle-error', error);
            }
            if (!this.isFavorited) {
                this.isFavorited = true;
                this.item.favorites_count = this.item.favorites_count ? this.item.favorites_count + 1 : 1;
            } else {
                // When a reply is unfavorited
                this.isFavorited = false;
                this.item.favorites_count = this.item.favorites_count ? this.item.favorites_count - 1 : 0;
            }
        },
    },
};

</script> */
